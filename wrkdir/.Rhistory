chisq.test(native.country_tbl)
adult_df[adult_df == "?"] <- NA
colSums(is.na(adult_df))
adult_df = read.csv("adult.data",header = FALSE,strip.white = TRUE, stringsAsFactors = TRUE,col.names = c("age","workclass","fnlwgt","education","education-num","marital-status","occupation",
"relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","income"))
str(adult_df)
summary(adult_df$age)
summary(adult_df$workclass)
summary(adult_df$fnlwgt)
summary(adult_df$education)
summary(adult_df$education.num)
summary(adult_df$marital.status)
summary(adult_df$occupation)
summary(adult_df$relationship)
summary(adult_df$race)
summary(adult_df$sex)
summary(adult_df$capital.gain)
summary(adult_df$capital.loss)
summary(adult_df$hours.per.week)
summary(adult_df$native.country)
summary(adult_df$income)
inc_table = table(adult_df$income)
inc_table
round(prop.table(inc_table) * 100, digits = 2)
attach(adult_df)
boxplot(age~income)
boxplot(fnlwgt~income)
boxplot(education.num~income)
boxplot(education.num~income)
boxplot(capital.gain~income)
boxplot(capital.loss~income)
boxplot(hours.per.week~income)
t.test(age~income)
t.test(fnlwgt~income)
t.test(education.num~income)
t.test(capital.gain~income)
t.test(capital.loss~income)
t.test(hours.per.week~income)
adult_df_old = adult_df
adult_df = adult_df[-3]
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
education_tbl = table(education, income)
education_tbl
chisq.test(education_tbl)
occupation_tbl = table(occupation, income)
occupation_tbl
chisq.test(occupation_tbl)
relationship_tbl = table(relationship, income)
relationship_tbl
chisq.test(relationship_tbl)
sex_tbl = table(sex, income)
sex_tbl
chisq.test(sex_tbl)
native.country_tbl = table(native.country, income)
native.country_tbl
chisq.test(native.country_tbl)
adult_df[adult_df == "?"] <- NA
colSums(is.na(adult_df))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
adult_df$workclass[is.na(adult_df$workclass)] = Mode(adult_df$workclass)
adult_df$occupation[is.na(adult_df$occupation)] = Mode(adult_df$occupation)
adult_df$native.country[is.na(adult_df$native.country)] = Mode(adult_df$native.country)
colSums(is.na(adult_df))
native.country_tbl = table(native.country, income)
native.country_tbl
chisq.test(native.country_tbl)
install.packages("mltools")
library(mltools)
library(data.table)
encoded_table = one_hot(data.table(adult_df[,-which(names(adult_df) == "income")]), dropUnusedLevels = TRUE)
encoded_df = as.data.frame(encoded_table)
encoded_df$income = adult_df$income
names(encoded_df)
set.seed(1)
normalize = function(col){
(col - min(col))/(max(col) - min(col))
}
normalized_df = as.data.frame(sapply(encoded_df[-(length(encoded_df))], normalize))
encoded_df = encoded_df[sample(nrow(encoded_df),replace = FALSE),]
normalized_df = as.data.frame(sapply(encoded_df[-(length(encoded_df))], normalize))
library(lattice)
library(ggplot2)
library(caret)
library(class)
knn_fold=function(features,target,fold,k){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
validation_preds=knn(train,validation,train_labels,k=k)
t= table(validation_labels,validation_preds)
error=(t[1,2]+t[2,1])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
return(error)
}
crossValidationError=function(features,target,k,k_cross){
folds=createFolds(target,k=k_cross)
errors=sapply(folds,knn_fold,features=features, target=target,k=k)
}
#k = floor(sqrt(nrow(normalized_df)*0.8))
#cf_error = crossValidationError(normalized_df,encoded_df$income, k = (k + 5), k_cross=5)
#mean(cf_error)
install.packages("mltools")
native.country_tbl = table(adult_df$native.country, income)
native.country_tbl = table(adult_df$native.country, adult_df$income)
native.country_tbl
chisq.test(native.country_tbl)
colSums(is.na(adult_df))
adult_df = read.csv("adult.data",header = FALSE,strip.white = TRUE, stringsAsFactors = TRUE,col.names = c("age","workclass","fnlwgt","education","education-num","marital-status","occupation",
"relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","income"))
str(adult_df)
summary(adult_df$age)
summary(adult_df$workclass)
summary(adult_df$fnlwgt)
summary(adult_df$education)
summary(adult_df$education.num)
summary(adult_df$marital.status)
summary(adult_df$occupation)
summary(adult_df$relationship)
summary(adult_df$race)
summary(adult_df$sex)
summary(adult_df$capital.gain)
summary(adult_df$capital.loss)
summary(adult_df$hours.per.week)
summary(adult_df$native.country)
summary(adult_df$income)
inc_table = table(adult_df$income)
inc_table
round(prop.table(inc_table) * 100, digits = 2)
attach(adult_df)
boxplot(age~income)
boxplot(fnlwgt~income)
boxplot(education.num~income)
boxplot(education.num~income)
boxplot(capital.gain~income)
boxplot(capital.loss~income)
boxplot(hours.per.week~income)
t.test(age~income)
t.test(fnlwgt~income)
t.test(education.num~income)
t.test(capital.gain~income)
t.test(capital.loss~income)
t.test(hours.per.week~income)
adult_df_old = adult_df
adult_df = adult_df[-3]
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
education_tbl = table(education, income)
education_tbl
chisq.test(education_tbl)
occupation_tbl = table(occupation, income)
occupation_tbl
chisq.test(occupation_tbl)
relationship_tbl = table(relationship, income)
relationship_tbl
chisq.test(relationship_tbl)
sex_tbl = table(sex, income)
sex_tbl
chisq.test(sex_tbl)
native.country_tbl = table(native.country, income)
native.country_tbl
chisq.test(native.country_tbl)
adult_df[adult_df == "?"] <- NA
colSums(is.na(adult_df))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
adult_df$workclass[is.na(adult_df$workclass)] = Mode(adult_df$workclass)
adult_df$occupation[is.na(adult_df$occupation)] = Mode(adult_df$occupation)
adult_df$native.country[is.na(adult_df$native.country)] = Mode(adult_df$native.country)
colSums(is.na(adult_df))
native.country_tbl = table(adult_df$native.country, adult_df$income)
native.country_tbl
chisq.test(native.country_tbl)
#install.packages("mltools")
library(mltools)
library(data.table)
encoded_table = one_hot(data.table(adult_df[,-which(names(adult_df) == "income")]), dropUnusedLevels = TRUE)
encoded_df = as.data.frame(encoded_table)
encoded_df$income = adult_df$income
names(encoded_df)
set.seed(1)
normalize = function(col){
(col - min(col))/(max(col) - min(col))
}
normalized_df = as.data.frame(sapply(encoded_df[-(length(encoded_df))], normalize))
encoded_df = encoded_df[sample(nrow(encoded_df),replace = FALSE),]
normalized_df = as.data.frame(sapply(encoded_df[-(length(encoded_df))], normalize))
library(lattice)
library(ggplot2)
library(caret)
library(class)
knn_fold=function(features,target,fold,k){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
validation_preds=knn(train,validation,train_labels,k=k)
t= table(validation_labels,validation_preds)
error=(t[1,2]+t[2,1])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
return(error)
}
crossValidationError=function(features,target,k,k_cross){
folds=createFolds(target,k=k_cross)
errors=sapply(folds,knn_fold,features=features, target=target,k=k)
}
#k = floor(sqrt(nrow(normalized_df)*0.8))
#cf_error = crossValidationError(normalized_df,encoded_df$income, k = (k + 5), k_cross=5)
#mean(cf_error)
native.country_tbl = table(adult_df$native.country, adult_df$income)
native.country_tbl
chisq.test(native.country_tbl[-1])
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
education_tbl = table(education, income)
education_tbl
chisq.test(education_tbl)
occupation_tbl = table(occupation, income)
occupation_tbl
chisq.test(occupation_tbl)
relationship_tbl = table(relationship, income)
relationship_tbl
chisq.test(relationship_tbl)
sex_tbl = table(sex, income)
sex_tbl
chisq.test(sex_tbl)
native.country_tbl = table(native.country, income)
native.country_tbl[-1] #to remove "?" from the factor since it breaks the chi-squared test
chisq.test(native.country_tbl[-1])
adult_df = read.csv("adult.data",header = FALSE,strip.white = TRUE, stringsAsFactors = TRUE,col.names = c("age","workclass","fnlwgt","education","education-num","marital-status","occupation",
"relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","income"))
str(adult_df)
summary(adult_df$age)
summary(adult_df$workclass)
summary(adult_df$fnlwgt)
summary(adult_df$education)
summary(adult_df$education.num)
summary(adult_df$marital.status)
summary(adult_df$occupation)
summary(adult_df$relationship)
summary(adult_df$race)
summary(adult_df$sex)
summary(adult_df$capital.gain)
summary(adult_df$capital.loss)
summary(adult_df$hours.per.week)
summary(adult_df$native.country)
summary(adult_df$income)
inc_table = table(adult_df$income)
inc_table
round(prop.table(inc_table) * 100, digits = 2)
attach(adult_df)
boxplot(age~income)
boxplot(fnlwgt~income)
boxplot(education.num~income)
boxplot(education.num~income)
boxplot(capital.gain~income)
boxplot(capital.loss~income)
boxplot(hours.per.week~income)
t.test(age~income)
t.test(fnlwgt~income)
t.test(education.num~income)
t.test(capital.gain~income)
t.test(capital.loss~income)
t.test(hours.per.week~income)
adult_df_old = adult_df
adult_df = adult_df[-3]
workclass_tbl = table(workclass, income)
workclass_tbl
chisq.test(workclass_tbl)
marital.status_tbl = table(marital.status, income)
marital.status_tbl
chisq.test(marital.status_tbl)
education_tbl = table(education, income)
education_tbl
chisq.test(education_tbl)
occupation_tbl = table(occupation, income)
occupation_tbl
chisq.test(occupation_tbl)
relationship_tbl = table(relationship, income)
relationship_tbl
chisq.test(relationship_tbl)
sex_tbl = table(sex, income)
sex_tbl
chisq.test(sex_tbl)
native.country_tbl = table(native.country, income)
native.country_tbl
chisq.test(native.country_tbl[-1]) #to remove "?" from the factor since it breaks the chi-squared test
adult_df[adult_df == "?"] <- NA
colSums(is.na(adult_df))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
adult_df$workclass[is.na(adult_df$workclass)] = Mode(adult_df$workclass)
adult_df$occupation[is.na(adult_df$occupation)] = Mode(adult_df$occupation)
adult_df$native.country[is.na(adult_df$native.country)] = Mode(adult_df$native.country)
colSums(is.na(adult_df))
#install.packages("mltools")
library(mltools)
library(data.table)
encoded_table = one_hot(data.table(adult_df[,-which(names(adult_df) == "income")]), dropUnusedLevels = TRUE)
encoded_df = as.data.frame(encoded_table)
encoded_df$income = adult_df$income
names(encoded_df)
set.seed(1)
normalize = function(col){
(col - min(col))/(max(col) - min(col))
}
normalized_df = as.data.frame(sapply(encoded_df[-(length(encoded_df))], normalize))
encoded_df = encoded_df[sample(nrow(encoded_df),replace = FALSE),]
normalized_df = as.data.frame(sapply(encoded_df[-(length(encoded_df))], normalize))
library(lattice)
library(ggplot2)
library(caret)
library(class)
knn_fold=function(features,target,fold,k){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
validation_preds=knn(train,validation,train_labels,k=k)
t= table(validation_labels,validation_preds)
error=(t[1,2]+t[2,1])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
return(error)
}
crossValidationError=function(features,target,k,k_cross){
folds=createFolds(target,k=k_cross)
errors=sapply(folds,knn_fold,features=features, target=target,k=k)
}
#k = floor(sqrt(nrow(normalized_df)*0.8))
#cf_error = crossValidationError(normalized_df,encoded_df$income, k = (k + 5), k_cross=5)
#mean(cf_error)
k = floor(sqrt(nrow(normalized_df)*0.8))
cf_error = crossValidationError(normalized_df,encoded_df$income, k = (k + 5), k_cross=5)
k = floor(sqrt(nrow(normalized_df)*0.8))
k = floor(sqrt(nrow(normalized_df)*0.8))
k = k * 1.2
cf_error = crossValidationError(normalized_df,encoded_df$income, k = k, k_cross=5)
mean(cf_error)
k = floor(sqrt(nrow(normalized_df)*0.8))
cf_error = crossValidationError(normalized_df,encoded_df$income, k = k, k_cross=5)
mean(cf_error)
k = floor(sqrt(nrow(normalized_df)))
cf_error = crossValidationError(normalized_df,encoded_df$income, k = k, k_cross=5)
mean(cf_error)
mean(cf_error)
#k = 90
cf_error_90 = crossValidationError(normalized_df,encoded_df$income, k = 90, k_cross=5)
mean(cf_error_90)
#k = 45
cf_error_45 = crossValidationError(normalized_df,encoded_df$income, k = 45, k_cross=5)
mean(cf_error_45)
#k = 22
cf_error_22 = crossValidationError(normalized_df,encoded_df$income, k = 22, k_cross=5)
mean(cf_error_22)
#k = 11
cf_error_11 = crossValidationError(normalized_df,encoded_df$income, k = 11, k_cross=5)
mean(cf_error_11)
#k = 5
cf_error_5 = crossValidationError(normalized_df,encoded_df$income, k = 5, k_cross=5)
mean(cf_error_5)
#k = 1
cf_error_1 = crossValidationError(normalized_df,encoded_df$income, k = 1, k_cross=5)
mean(cf_error_1)
#k = 2
cf_error_2 = crossValidationError(normalized_df,encoded_df$income, k = 2, k_cross=5)
mean(cf_error_2)
cf_error_180 = crossValidationError(normalized_df,encoded_df$income, k = 180, k_cross=5) #sqrt of the nrow of normalized_df = 180
error = c(cf_error_1, cf_error_2, cf_error_5, cf_error_11, cf_error_22, cf_error_45, cf_error_90, cf_error_180)
k_vals = c(1, 2, 5, 11, 22, 45, 90, 180)
plot(error, k_vals)
error = sapply(c(cf_error_1, cf_error_2, cf_error_5, cf_error_11, cf_error_22, cf_error_45, cf_error_90, cf_error_180),mean)
k_vals = c(1, 2, 5, 11, 22, 45, 90, 180)
plot(error, k_vals)
error = apply(c(cf_error_1, cf_error_2, cf_error_5, cf_error_11, cf_error_22, cf_error_45, cf_error_90, cf_error_180),mean)
error = apply(c(cf_error_1, cf_error_2, cf_error_5, cf_error_11, cf_error_22, cf_error_45, cf_error_90, cf_error_180),1,mean)
error = c(mean(cf_error_1), mean(cf_error_2), mean(cf_error_5), mean(cf_error_11), mean(cf_error_22), mean(cf_error_45), mean(cf_error_90), mean(cf_error_180))
k_vals = c(1, 2, 5, 11, 22, 45, 90, 180)
plot(error, k_vals)
error = c(mean(cf_error_1), mean(cf_error_2), mean(cf_error_5), mean(cf_error_11), mean(cf_error_22), mean(cf_error_45), mean(cf_error_90), mean(cf_error_180))
k_vals = c(1, 2, 5, 11, 22, 45, 90, 180)
plot(kvals, error)
error = c(mean(cf_error_1), mean(cf_error_2), mean(cf_error_5), mean(cf_error_11), mean(cf_error_22), mean(cf_error_45), mean(cf_error_90), mean(cf_error_180))
kvals = c(1, 2, 5, 11, 22, 45, 90, 180)
plot(kvals, error)
knn_fold = function(features,target,fold,k){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
validation_preds=knn(train,validation,train_labels,k=k)
t= table(validation_labels,validation_preds)
FPR=t[1,2]/(t[1,2]+t[1,1])
FNR=t[2,1]/(t[2,1]+t[2,2])
return (c("FPR"=FPR,"FNR"=FNR))
}
crossValidatonError=function(features,target,k,k_cross){
folds=createFolds(target,k=k_cross)
errors=sapply(folds,knn_kfold,features=features, target=target,k=k)
}
errors = crossValidationError(normalized_df,encoded_df$income, k = 22, k_cross=5)
errors
mean(errors)
ors
errors
rowMeans(errors)
set.seed(1)
naiveBayes_fold=function(fold,features,target,laplace=0){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
NaiveBayes_model=naiveBayes(train,train_labels,laplace=laplace)
validation_preds=predict(NaiveBayes_model, validation)
t= table(validation_labels,validation_preds)
error=(t[1,2]+t[2,1])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
return(error)
}
crossValidationError=function(features,target,laplace=0,n_folds)
{
folds=createFolds(target,k=n_folds)
errors=sapply(folds,naiveBayes_fold,features=features,
target=target,laplace=laplace)
}
cv_error = crossValidationError(adult_df, adult_df$income, n_folds = 5)
library(lattice)
library(ggplot2)
library(caret)
library(class)
naiveBayes_fold=function(fold,features,target,laplace=0){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
NaiveBayes_model=naiveBayes(train,train_labels,laplace=laplace)
validation_preds=predict(NaiveBayes_model, validation)
t= table(validation_labels,validation_preds)
error=(t[1,2]+t[2,1])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
return(error)
}
crossValidationError=function(features,target,laplace=0,n_folds)
{
folds=createFolds(target,k=n_folds)
errors=sapply(folds,naiveBayes_fold,features=features,
target=target,laplace=laplace)
}
cv_error = crossValidationError(adult_df, adult_df$income, n_folds = 5)
library(caret)
?naiveBayes
#install.packages("e1071")
library(e1071)
naiveBayes_fold=function(fold,features,target,laplace=0){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
NaiveBayes_model=naiveBayes(train,train_labels,laplace=laplace)
validation_preds=predict(NaiveBayes_model, validation)
t= table(validation_labels,validation_preds)
error=(t[1,2]+t[2,1])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
return(error)
}
crossValidationError=function(features,target,laplace=0,n_folds)
{
folds=createFolds(target,k=n_folds)
errors=sapply(folds,naiveBayes_fold,features=features,
target=target,laplace=laplace)
}
cv_error = crossValidationError(adult_df, adult_df$income, n_folds = 5)
cv_error
mean(cv_error)
naiveBayes_fold=function(fold,features,target,laplace=0){
train=features[-fold,]
validation=features[fold,]
train_labels=target[-fold]
validation_labels=target[fold]
NaiveBayes_model=naiveBayes(train,train_labels,laplace=laplace)
validation_preds=predict(NaiveBayes_model, validation)
t= table(validation_labels,validation_preds)
FPR=t[1,2]/(t[1,2]+t[1,1])
FNR=t[2,1]/(t[2,1]+t[2,2])
return (c("FPR"=FPR,"FNR"=FNR))
}
crossValidationError=function(features,target,laplace=0,n_folds)
{
folds=createFolds(target,k=n_folds)
errors=sapply(folds,naiveBayes_fold,features=features,
target=target,laplace=laplace)
return(rowMeans(errors))
}
errors = crossValidationError(adult_df, adult_df$income, n_folds = 5)
errors
errors
setwd("~/Documents/UIS_Courses/introToMachineLearning/Regularization/wrkdir")
housing_df = read.csv("housing.csv")[,-1]
summary(housing_df)
