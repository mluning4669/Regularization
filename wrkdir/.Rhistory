newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
missing_count = length(which(!complete.cases(housing_df)))
as.numeric(sprintf("%2.3f",missing_count/1399)) * 100 # 1399 is the number of observations in the data frame
hist(housing_df$SalePrice, xlab = "SalePrice", main = "Sale Price")
attach(housing_df)
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
col_name = names(housing_df)
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(scatter_cols, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
corr(SalePrice ~ MSSubClass)
cor.test(SaleType~MSSubClass)
?cor.test
cor.test(SaleType,MSSubClass)
chisq.test(SalePrice ~ MSSubClass)
chisq.test(SalePrice, MSSubClass)
chisq.test(SalePrice, MSZoning)
chisq_temp = chisq.test(SalePrice, MSZoning)
chisq_temp.p.value
str(chisq_temp)
chisq_temp$p.value
?append
cor(SalePrice, LotFrontage)
cor(SalePrice, YearBuilt)
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
col_name = names(housing_df)
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(scatter_cols, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
cor_temp = cor.test(SalePrice, housing_df[,col])
if (cor_temp >= 0.5 | cor_temp <= -0.5) {
append(correlated_variables, col)
}
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
cor.test(SalePrice, MoSold)
cor_temp = cor.test(SalePrice, MoSold)
cor_temp$estimate
col_name = names(housing_df)
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(scatter_cols, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
cor_temp = cor.test(SalePrice, housing_df[,col])
if (cor_temp$estimate >= 0.5 | cor_temp$estimate <= -0.5) {
append(correlated_variables, col)
}
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
correlated_variables
test_vect = c()
test_vect = vector(mode = "character")
append(test_vect, "hello")
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
correlated_variables = append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
correlated_variables = append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
col_name = names(housing_df)
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(scatter_cols, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
cor_temp = cor.test(SalePrice, housing_df[,col])
if (cor_temp$estimate >= 0.5 | cor_temp$estimate <= -0.5) {
correlated_variables = append(correlated_variables, col)
}
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
correlated_variables
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
correlated_variables = append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
correlated_variables = append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
correlated_variables
test_vect = vector(mode = "character")
test_vect = append(test_vect, "hello")
test_vect
test_vect = append(test_vect, "hello")
test_vect
test_vect = append(test_vect, "hello")
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.05) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.05) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.005) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
?chisq.test
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]), simulate.p.value = TRUE)
if (chisq_temp$p.value < 0.005) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]), simulate.p.value = TRUE)
if (chisq_temp$p.value < 0.005) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
correlated_variables
cor.test(SalePrice, MSZoning)
chisq.test(SalePrice, MSZoning)
chisq.test(SalePrice, MSZoning, simulate.p.value = TRUE)
chisq.test(SalePrice, MSZoning, simulate.p.value = TRUE)
chisq.test(SalePrice, MSZoning, simulate.p.value = TRUE)
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]), simulate.p.value = TRUE)
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]), simulate.p.value = TRUE)
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
correlated_variables
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
correlated_variables
col_name = names(housing_df)
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(scatter_cols, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
cor_temp = cor.test(SalePrice, housing_df[,col])
if (cor_temp$estimate >= 0.5 | cor_temp$estimate <= -0.5) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
correlated_variables
which(colSums(is.na(housing_df)) > 0 & is.character(housing_df))
which(colSums(is.na(housing_df)) > 0 & as.integer(is.character(housing_df)))
is.character(housing_df)
is.na(housing_df)
sapply(housing_df, is.character) == TRUE]
sapply(housing_df, is.character) == TRUE
colSums(is.na(housing_df)) > 0
which(colSums(is.na(housing_df)) > 0 & sapply(housing_df,is.character))
colSums(is.na(housing_df)) > 0 & sapply(housing_df,is.character)
sapply(housing_df,is.character)
sapply(housing_df, is.character)
sapply(housing_df, is.character) == TRUE
(colSums(is.na(housing_df)) > 0) & sapply(housing_df,is.character)
(colSums(is.na(housing_df)) > 0)
housing_df = read.csv("housing.csv")[,-1]
## first column is Id so it can be removed
summary(housing_df)
length(housing_df[,sapply(housing_df, is.character)]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric)]) ## Number of numerical variables
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
(colSums(is.na(housing_df)) > 0) & sapply(housing_df,is.character)
(colSums(is.na(housing_df)) > 0)
sapply(housing_df, is.character)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
missing_count = length(which(!complete.cases(housing_df)))
as.numeric(sprintf("%2.3f",missing_count/1399)) * 100 # 1399 is the number of observations in the data frame
hist(housing_df$SalePrice, xlab = "SalePrice", main = "Sale Price")
hist(log(housing_df$SalePrice), xlab = "Log SalePrice", main = "Sale Price")
attach(housing_df)
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold","")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
housing_df = read.csv("housing.csv")[,-1]
## first column is Id so it can be removed
summary(housing_df)
length(housing_df[,sapply(housing_df, is.character)]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric)]) ## Number of numerical variables
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
missing_count = length(which(!complete.cases(housing_df)))
as.numeric(sprintf("%2.3f",missing_count/1399)) * 100 # 1399 is the number of observations in the data frame
hist(housing_df$SalePrice, xlab = "SalePrice", main = "Sale Price")
hist(log(housing_df$SalePrice), xlab = "Log SalePrice", main = "Sale Price")
attach(housing_df)
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold","")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
housing_df = read.csv("housing.csv")[,-1]
## first column is Id so it can be removed
summary(housing_df)
length(housing_df[,sapply(housing_df, is.character) == TRUE]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric) == TRUE]) ## Number of numerical variables
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
missing_count = length(which(!complete.cases(housing_df)))
as.numeric(sprintf("%2.3f",missing_count/1399)) * 100 # 1399 is the number of observations in the data frame
hist(housing_df$SalePrice, xlab = "SalePrice", main = "Sale Price")
hist(log(housing_df$SalePrice), xlab = "Log SalePrice", main = "Sale Price")
attach(housing_df)
colName = names(housing_df)
correlated_variables = vector(mode = "character")
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold","")
temp1 = lapply(non_scatter, function(col) {
chisq_temp = chisq.test(SalePrice, as.factor(housing_df[,col]))
if (chisq_temp$p.value < 0.006) {
correlated_variables <<- append(correlated_variables, col)
}
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
