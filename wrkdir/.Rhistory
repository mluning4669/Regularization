length(housing_df[, typeof(housing_df) == "character"])
sapply(housing_df, is.character)
length(sapply(housing_df, is.character))
length(sapply(housing_df, is.character) == TRUE)
sapply(housing_df, is.character) == TRUE
typeof(sapply(housing_df, is.character) == TRUE)
housing_df[,sapply(housing_df, is.character) == TRUE]
str(housing_df[,sapply(housing_df, is.character) == TRUE])
length(housing_df[,sapply(housing_df, is.character) == TRUE])
length(housing_df[,sapply(housing_df, is.character) == TRUE]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric) == TRUE]) ## Number of numerical variables
?is.na
sapply(housing_df, is.na)
housing_df[,sapply(housing_df, is.na)]
?has.na
?sapply
sapply(housing_df$GarageYrBlt, is.na)
colSum(sapply(housing_df, is.na))
colSums(sapply(housing_df, is.na))
colSums(sapply(housing_df, is.na)) > 0
missing_vals_columns = colSums(sapply(housing_df, is.na)) > 0
housing_df[,missing_vals_columns]
missing_vals_columns = colSums(sapply(housing_df, is.na)) > 0
str(housing_df[,missing_vals_columns])
NaN
colSums(sapply(housing_df, is.nan)) > 0
levels(housing_df$PoolQC)
levels(as.factor(housing_df$PoolQC))
?levels
levels(as.factor(housing_df$Fence))
levels(as.factor(housing_df$Alley))
levels(as.factor(housing_df$MiscFeature))
is.na(housing_df)) > 0
is.na(housing_df) > 0
colSums(is.na(housing_df)) > 0
which(colSums(is.na(housing_df)) > 0)
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na), decreasing = TRUE)
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na), decreasing = TRUE))
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
sort(colMeans(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
?colMeans
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
sort(format(means, digits = 4, nsmall = 2), decreasing = TRUE)
?format
format(means, digits = 4, nsmall = 2)
format(means, digits = 2, nsmall = 2)
format(means, digits = 2)
sprintf("2.2f", means)
sprintf("$2.2f", means)
class(means)
sapple(function(x){sprinf("$2.2f",x)},means)
sapply(function(x){sprinf("$2.2f",x)},means)
means
typeof(means)
attributes(means)
is.vector(means)
means[1]
sapply(function(x){sprinf("$2.2f",x)},means)
sprintf("$2.2f", means)
?sprintf
sprintf("%2.2f", means)
typeof(means[1])
class(means[1])
format(means, digits = 4)
format(means, nsmall = 4)
means = sprintf("%2.2f", means)
means
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
sort(format(means, digits = 4, nsmall = 2), decreasing = TRUE)
newmeans = colMeans(sapply(housing_df[missing_vals_columns], is.na))
names(newmeans) = names(means)
newmeans
newmeans = sprintf("%2.2f", means)
names(newmeans) = names(means)
newmeans
sort(newmeans, decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
sort(newmeans, decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
max_price = max(housing_df$SalePrice)
min_price = min(housing_df$SalePrice)
iqr = max_price - min_price
iqr_index = (housing_df$SalePrice > min_price - 1.5*iqr & housing_df$SalePrice < max_price + 1.5*iqr)
housing_df$SalePrice = housing_df$SalePrice[iqr_index]
## After transformation
str(housing_df$SalePrice)
quantile(housing_df$SalePrice)
quantile(housing_df$SalePrice)[2]
## Before transformation
str(housing_df$SalePrice)
1st_quant = max(housing_df$SalePrice)
quartile(housing_df)
?quantile
quantile(housing_df$SalePrice)[2]
quantile(housing_df$SalePrice)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = first_quant - third_quant
iqr_index = (housing_df$SalePrice > third_quant - 1.5*iqr & housing_df$SalePrice < first_quant + 1.5*iqr)
housing_df$SalePrice = housing_df$SalePrice[iqr_index]
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df$SalePrice = housing_df$SalePrice[iqr_index]
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df$SalePrice = NULL
housing_df$SalePrice = housing_df$SalePrice[iqr_index]
## After transformation
str(housing_df$SalePrice)
housing_df = read.csv("housing.csv")[,-1]
## first column is Id so it can be removed
summary(housing_df)
length(housing_df[,sapply(housing_df, is.character) == TRUE]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric) == TRUE]) ## Number of numerical variables
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df["SalePrice"] = housing_df$SalePrice[iqr_index]
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[,iqr_index]
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index]
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
which(colSums(is.na(housing_df)) > 0)
# Cleaning categorical variables
cat_df = housing_df[,sapply(housing_df, is.character) == TRUE & colSums(is.na(housing_df)) > 0]
str(cat_df)
?lapply
# Cleaning categorical variables
cat_columns = sapply(housing_df, is.character) == TRUE & colSums(is.na(housing_df)) > 0
lapply(housing_df[,cat_columns], function(x){
x[is.na(x)] = "notapplicable"
})
sapply(housing_df, is.character) == TRUE & colSums(is.na(housing_df)) > 0
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
lapply(housing_df[,cat_columns], function(x){
x[is.na(x)] = "notapplicable"
})
(sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
((sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0))
levels(housing_df$Alley)
sapply(housing_df, is.character) == TRUE)
sapply(housing_df, is.character) == TRUE
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
lapply(housing_df[,cat_columns], function(x){
summary(x)
x[is.na(x)] = "notapplicable"
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
lapply(housing_df[,cat_columns], function(x){
summary(x)
#x[is.na(x)] = "notapplicable"
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
lapply(housing_df[,cat_columns], function(x){
summary(x)
housing_df$x[is.na(x)] = "notapplicable"
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
lapply(housing_df[,cat_columns], function(x){
summary(x)
is.na(x)
housing_df$x[is.na(x)] = "notapplicable"
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
lapply(housing_df[,cat_columns], function(x){
summary(x)
housing_df$x[is.na(x)] = "notapplicable"
is.na(x)
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(housing_df[,cat_columns], function(x){
summary(x)
x[is.na(x)] = "notapplicable"
})
str(new_columns)
new_columns$Alley
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(housing_df[,cat_columns], function(x){
summary(x)
x[is.na(x)]
})
str(new_columns)
housing_df$Alley[is,na(housing_df$Alley)]
housing_df$Alley[is.na(housing_df$Alley)]
housing_df$Alley[is.na(housing_df$Alley)] = "notapplicable"
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(housing_df[,cat_columns], function(x){
summary(x)
x[is.na(x)]
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(housing_df[,cat_columns], function(x){
summary(x)
x[is.na(x)] <<- "notapplicable"
})
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(housing_df[,cat_columns], function(x){
summary(x)
housing_df$x[is.na(housing_df$x)] <<- "notapplicable"
})
names(housing_df[,cat_columns])
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,cat_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notapplicable"
})
housing_df = read.csv("housing.csv")[,-1]
## first column is Id so it can be removed
summary(housing_df)
length(housing_df[,sapply(housing_df, is.character) == TRUE]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric) == TRUE]) ## Number of numerical variables
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
# Cleaning categorical variables
cat_columns = (sapply(housing_df, is.character) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,cat_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,numeric_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
which(colSums(is.na(housing_df)) > 0)
colSums(is.na(housing_df)) > 0
housing_df = read.csv("housing.csv")[,-1]
## first column is Id so it can be removed
summary(housing_df)
length(housing_df[,sapply(housing_df, is.character) == TRUE]) ## Number of categorical variables
length(housing_df[,sapply(housing_df, is.numeric) == TRUE]) ## Number of numerical variables
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
## Before transformation
str(housing_df$SalePrice)
first_quant = quantile(housing_df$SalePrice)[2]
third_quant = quantile(housing_df$SalePrice)[4]
iqr = third_quant - first_quant
iqr_index = (housing_df$SalePrice > first_quant - 1.5*iqr & housing_df$SalePrice < third_quant + 1.5*iqr)
housing_df = housing_df[iqr_index, ]
## After transformation
str(housing_df$SalePrice)
# Cleaning categorical variables
cat_columns = c("Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature")
new_columns = lapply(cat_columns, function(x){
housing_df[is.na(housing_df[,x]),x] <<- "notApplicable"
})
# Cleaning numerical variables
num_columns = (sapply(housing_df, is.numeric) == TRUE) & (colSums(is.na(housing_df)) > 0)
new_columns = lapply(names(housing_df[,num_columns]), function(x){
housing_df[is.na(housing_df[,x]),x] <<- 0
})
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
sort(colSums(sapply(housing_df[missing_vals_columns], is.na)), decreasing = TRUE)
missing_vals_columns = which(colSums(is.na(housing_df)) > 0)
means = colMeans(sapply(housing_df[missing_vals_columns], is.na))
newmeans = as.numeric(sprintf("%2.3f", means)) * 100
names(newmeans) = names(means)
sort(newmeans, decreasing = TRUE)
complete.cases
?complete.cases
complete.cases(housing_df)
which(!complete.cases(housing_df))
housing_df[225,]
which(!complete.cases(housing_df))
sum(which(!complete.cases(housing_df)))
length(which(!complete.cases(housing_df)))
missing_count = length(which(!complete.cases(housing_df)))
sprintf("%2.3f",missing_count/1399)
missing_count = length(which(!complete.cases(housing_df)))
as.numeric(sprintf("%2.3f",missing_count/1399))
missing_count = length(which(!complete.cases(housing_df)))
as.numeric(sprintf("%2.3f",missing_count/1399)) * 100
hist(housing_df$SalePrice)
hist(housing_df$SalePrice, xlab = "Sale Price")
?hist
hist(housing_df$SalePrice, xlab = "Sale Price", main = "Sale Price")
hist(log(housing_df$SalePrice), xlab = "Sale Price", main = "Sale Price")
hist(housing_df$SalePrice, xlab = "SalePrice", main = "Sale Price")
hist(log(housing_df$SalePrice), xlab = "Log SalePrice", main = "Sale Price")
plot(SalePrice ~ ., data=housing_df)
?plot
plot(y = housing_df$SalePrice, x = housing_df[,[1:5]])
plot(y = housing_df$SalePrice, x = housing_df[,1:5])
str(housing_df[,1:5])
plot(housing_df$SalePrice ~ housing_df[,1:5])
plot(housing_df[,"SalePrice"] ~ housing_df[,1:5])
plot(housing_df[,"SalePrice"] ~ housing_df[,c(1:5)])
plot(housing_df[,"SalePrice"] ~ housing_df[,c(1,2,3)])
plot(housing_df["SalePrice"] ~ housing_df[c(1,2,3)])
plot(housing_df[c(1,2,3)] ~ housing_df["SalePrice"])
plot(housing_df[1:3] ~ housing_df["SalePrice"])
plot(housing_df["MSSubClass"] ~ housing_df["SalePrice"])
attach(housing_df)
plot(SalePrice ~ MSSubClass)
#housing_df[,sapply(housing_df, is.character) == TRUE]
lapply(housing_df, function(col) {
if (is.character(col)) {
plot(SalePrice ~ col)
}})
names(housing_df)
#housing_df[,sapply(housing_df, is.character) == TRUE]
colName = names(housing_df)
lapply(housing_df, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]))
}})
#housing_df[,sapply(housing_df, is.character) == TRUE]
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]))
}})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
colName = names(housing_df)
lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
colName = names(housing_df)[!names(housing_df) != "SalePrice"]
temp = lapply(colName, function(col) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
return()
})
colName = names(housing_df)[names(housing_df) != "SalePrice"]
temp = lapply(colName, function(col) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
return()
})
?plot
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
return()
})
t1 = c("one","two","three")
t2 = c("two","three","four")
t1 - t2
?setdiff
setdiff(t1,t2)
setdiff(t2,t1)
col_name = names(housing_df)
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(col_name, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
col_name = names(housing_df)
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
scatter_cols = setdiff(col_name, non_scatter)
temp = lapply(scatter_cols, function(col) {
if (is.numeric(housing_df[,col]) & col != "SalePrice") {
plot(SalePrice ~ housing_df[,col], xlab = col)
}
return()
})
colName = names(housing_df)
temp = lapply(colName, function(col) {
if (is.character(housing_df[,col])) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
}
})
non_scatter = c("MSSubClass","OverallQual","OverallCond","BsmtFullBath","BsmtFullBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","MoSold","YrSold")
temp1 = lapply(non_scatter, function(col) {
plot(SalePrice ~ as.factor(housing_df[,col]), xlab = col)
})
